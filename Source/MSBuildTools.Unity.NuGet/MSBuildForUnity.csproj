<Project>

  <Import Project="SDK.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>

    <PackageId>MSBuildForUnity</PackageId>
    <Description>Adds custom steps to the build to produce outputs suited for consumption in Unity 3D.</Description>

    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <DevelopmentDependency>true</DevelopmentDependency>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>

    <IsTool>true</IsTool>
    <BuildOutputTargetFolder>buildCommon</BuildOutputTargetFolder>

    <!-- Don't warn about DLL's outside of the lib folder, the DLL is for the MSBuild task so it should NOT live in the lib folder -->
    <NoWarn>$(NoWarn);NU5100</NoWarn>

    <!-- Dependencies need to be copied to the output directory so they can be signed -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
  </PropertyGroup>

  <!-- Setup the versioning for the package based on the build number if provided -->
  <PropertyGroup>
    <!-- Major is hard-coded and should be incremented on breaking changes -->
    <MajorVersion>0</MajorVersion>

    <!-- Minor version is hard-coded and should be incremented on feature additions that aren't breaking changes.-->
    <MinorVersion>8</MinorVersion>

    <!-- Revision (semver Patch) version is hard-coded and should be incremented when a bug fix is made.-->
    <RevisionVersion>1</RevisionVersion>
    
    <Version>$(MajorVersion).$(MinorVersion).$(RevisionVersion)</Version>
    <!-- Version is based on Major.Minor.Revision as defined above, however, in a lab BUILD_BUILDID will be set so we pull in that as the pre-release version. -->
    <Version Condition="'$(BUILD_BUILDID)' != '' And !$(BUILD_SOURCEBRANCH.StartsWith('refs/heads/release/'))">$(Version)-$(BUILD_BUILDID)</Version>

    <PackageVersion>$(Version)</PackageVersion>
    <AssemblyVersion>$(MajorVersion).$(MinorVersion)</AssemblyVersion>
    <AssemblyFileVersion>$(AssemblyVersion).$(RevisionVersion).0</AssemblyFileVersion>
    <AssemblyFileVersion Condition="'$(BUILD_BUILDID)' != '' And !$(BUILD_SOURCEBRANCH.StartsWith('refs/heads/release/'))">$(AssemblyVersion).$(RevisionVersion).$(BUILD_BUILDID)</AssemblyFileVersion>
  </PropertyGroup>

  <ItemGroup>
   <Content Include="$(PackageId).props;$(PackageId).targets;">
      <PackagePath>build;buildCrossTargeting</PackagePath>
    </Content>

    <Content Include="
             UnityMetaFileGenerator.props;
             UnityMetaFileGenerator.targets;
             Publish.props;
             Publish.targets;
             RemapSymbolSources.props;
             RemapSymbolSources.targets;
             ">
      <PackagePath>buildCommon</PackagePath>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Framework" Version="15.9.20" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="15.9.20" />
    <PackageReference Include="Mono.Cecil" Version="0.11.1" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.2" />
  </ItemGroup>

  <!--
      There is a runtime dependency on Mono.Cecil and Newtonsoft for the tasks. Unfortunately there is no way to express that as a NuGet package dependency for build tasks.
      The only real option is to bundle the Mono.Cecil DLL's into our own package.
    -->
  <Target Name="EmbedMonoCecil">
     <ItemGroup>
      <Content Include="$(OutputPath)\Mono.Cecil.dll" PackagePath="buildCommon" />
      <Content Include="$(OutputPath)\Mono.Cecil.*.dll" PackagePath="buildCommon" />
      <Content Include="$(OutputPath)\Newtonsoft.Json.dll" PackagePath="buildCommon" />
    </ItemGroup>
  </Target>

  <Import Project="SDK.targets" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <PackDependsOn>EmbedMonoCecil;$(PackDependsOn)</PackDependsOn>
  </PropertyGroup>

</Project>
